generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String?   @unique
  username      String?   @unique
  image         String?
  emailVerified DateTime?
  joinedAt      DateTime  @default(dbgenerated("now()"))
  accounts      Account[]
  stores        Store[]
}

model Store {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  userId     String      @db.Uuid
  User       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  billboards Billboard[]
  categories Category[]
  products   Product[]
  sizes      Size[]
  colors     Color[]
  orders     Order[]
  createdAt  DateTime    @default(dbgenerated("now()"))
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  storeId    String     @db.Uuid
  label      String
  imageUrl   String[]
  categories Category[]
  createdAt  DateTime   @default(dbgenerated("now()"))
  updatedAt  DateTime   @updatedAt
  Store      Store      @relation(fields: [storeId], references: [id])
}

model Category {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  storeId     String    @db.Uuid
  billboardId String    @db.Uuid
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[]
  createdAt   DateTime  @default(dbgenerated("now()"))
  updatedAt   DateTime  @updatedAt
  Store       Store     @relation(fields: [storeId], references: [id])
}

model Product {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  storeId    String      @db.Uuid
  categoryId String      @db.Uuid
  name       String
  price      Float
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String      @db.Uuid
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String      @db.Uuid
  color      Color       @relation(fields: [colorId], references: [id])
  imageUrls  String[]
  orderItems OrderItem[]
  createdAt  DateTime    @default(dbgenerated("now()"))
  updatedAt  DateTime    @updatedAt
  Store      Store       @relation(fields: [storeId], references: [id])
  category   Category    @relation(fields: [categoryId], references: [id])
}

model Order {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  storeId    String      @db.Uuid
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(dbgenerated("now()"))
  updatedAt  DateTime    @updatedAt
  Store      Store       @relation(fields: [storeId], references: [id])
}

model OrderItem {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId   String  @db.Uuid
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.Uuid
  product   Product @relation(fields: [productId], references: [id])
}

model Size {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  storeId   String    @db.Uuid
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(dbgenerated("now()"))
  updatedAt DateTime  @updatedAt
  Store     Store     @relation(fields: [storeId], references: [id])
}

model Color {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  storeId   String    @db.Uuid
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(dbgenerated("now()"))
  updatedAt DateTime  @updatedAt
  Store     Store     @relation(fields: [storeId], references: [id])
}

model Test {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  price Float
}
